<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用jetcache来操作缓存</title>
    <link href="/2020/04/27/%E4%BD%BF%E7%94%A8jetcache%E6%9D%A5%E6%93%8D%E4%BD%9C%E7%BC%93%E5%AD%98/"/>
    <url>/2020/04/27/%E4%BD%BF%E7%94%A8jetcache%E6%9D%A5%E6%93%8D%E4%BD%9C%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h3 id="基本配置（Spring-Boot"><a href="#基本配置（Spring-Boot" class="headerlink" title="基本配置（Spring Boot)"></a>基本配置（Spring Boot)</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><pre><code class="xml">&lt;!-- jetCache  --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.alicp.jetcache&lt;/groupId&gt;    &lt;artifactId&gt;jetcache-starter-redis&lt;/artifactId&gt;    &lt;version&gt;2.6.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><h5 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h5><pre><code class="yml">#jetcache# @see com.alicp.jetcache.autoconfigure.JetCachePropertiesjetcache:  # 统计间隔，默认0：表示不统计  statIntervalMinutes: 1  # areaName是否作为缓存key前缀，默认True  areaInCacheName: false  local:    default:      # 已支持可选：linkedhashmap、caffeine      type: linkedhashmap      # key转换器的全局配置，当前只有：fastjson, @see com.alicp.jetcache.support.FastjsonKeyConvertor      keyConvertor: fastjson      # 每个缓存实例的最大元素的全局配置，仅local类型的缓存需要指定      limit: 100      # jetcache2.2以上，以毫秒为单位，指定多长时间没有访问，就让缓存失效，当前只有本地缓存支持。0表示不使用这个功能，指定30秒后失效      expireAfterAccessInMillis: 30000  remote:    default:      type: redis      keyConvertor: fastjson      valueEncoder: java      valueDecoder: java      poolConfig:        minIdle: 5        maxIdle: 20        maxTotal: 50      host: ${redis.host}      port: 6379      password: ${redis.password}</code></pre><h5 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h5><pre><code class="java">@SpringBootApplication@EnableMethodCache(basePackages = &quot;com.company.mypackagee&quot;)@EnableCreateCacheAnnotationpublic class Application extends SpringBootServletInitializer {    public static void main(String[] args) {        SpringApplication.run(Application.class);    }}</code></pre><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><ul><li><p>下面例子以操作<code>User</code>为例<br><code>user.java</code></p><pre><code class="java">@TableName(value = &quot;user&quot;)@Datapublic class User implements Serializable {    private static final long serialVersionUID = 738881519595997996L;    /**主键**/    @NotNull(message = &quot;主键不能为空&quot;)    private Long id;    /**姓名**/    @NotBlank(message = &quot;名字不能为空&quot;)    @Length(min = 1, message = &quot;名字至少1个字&quot;)    private String name;    /**手机号**/    @NotBlank(message = &quot;手机号不能为空&quot;)    @Size(max = 11, message = &quot;手机号最长11位&quot;)    @Pattern(regexp = &quot;^1\\d+$&quot;, message = &quot;手机号格式不正确&quot;)    private String phone;    /**电子邮件**/    @NotBlank(message = &quot;邮箱不能为空&quot;)    @Email(message = &quot;电子邮件格式不正确&quot;)    @Length(max = 30, message = &quot;邮箱长度不能超过30!&quot;)    private String email;    /**自我介绍**/    private String aboutme;    /**加密密码**/    private String passwd;    /**头像图片**/    private String avatar;    /**1:普通用户，2:房产经纪人**/    private Integer type;    /**创建时间**/    private Date createTime;    /**是否启用,1启用，0停用**/    private Integer enable;    /**所属经纪机构**/    private Integer agencyId;}</code></pre></li></ul><h4 id="基于注解实现方法缓存"><a href="#基于注解实现方法缓存" class="headerlink" title="基于注解实现方法缓存"></a>基于注解实现方法缓存</h4><h5 id="Cached：创建缓存"><a href="#Cached：创建缓存" class="headerlink" title="@Cached：创建缓存"></a>@Cached：创建缓存</h5><pre><code class="java">/** * 基于注解创建缓存 * 缓存在 Remote 的 Redis，也可以配置成 both 开启两级缓存 */@Cached(name = CACHE_NAME, key = &quot;#userId&quot;, cacheType = CacheType.LOCAL, expire = 5 * 60)public UserVO findUserById(Long userId) {    User user = userMapper.selectOne(queryWrapper);    //.....................}</code></pre><h5 id="CacheInvalidate：删除缓存"><a href="#CacheInvalidate：删除缓存" class="headerlink" title="@CacheInvalidate：删除缓存"></a>@CacheInvalidate：删除缓存</h5><pre><code class="java">@CacheInvalidate(name = CACHE_NAME, key = &quot;#userId&quot;)@Transactional(rollbackFor = Exception.class)public int deleteUserById(Long userId) {    User user = new User();    user.setId(userId);    user.setEnable(0);    UpdateWrapper&lt;User&gt; updateWrapper = new UpdateWrapper&lt;&gt;();    updateWrapper.lambda().eq(User::getId, userId).eq(User::getEnable, 1);    return userMapper.update(user, updateWrapper);}</code></pre><h4 id="基于-CreateCache注解创建Cache实例"><a href="#基于-CreateCache注解创建Cache实例" class="headerlink" title="基于@CreateCache注解创建Cache实例"></a>基于@CreateCache注解创建Cache实例</h4><h5 id="CreateCache"><a href="#CreateCache" class="headerlink" title="@CreateCache"></a>@CreateCache</h5><pre><code class="java">/** * 使用 @CreateCache 注解创建Cache实例; * 未定义默认值的参数，将使用yml中指定的全局配置; * 缓存在 Local，也可以配置成 both 开启两级缓存 */@CreateCache(name = CACHE_NAME, expire = 5 * 60, localLimit = 10, cacheType = CacheType.LOCAL)private Cache&lt;Long, UserVO&gt; userCache;</code></pre><h5 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h5><pre><code class="java">public UserVO getUserByIdAndCreateCache(Long userId) {    //根据id从缓存中取    UserVO userVO = userCache.get(userId);    log.info(&quot;userCreateCache get {} res {}&quot;, userId, userCache);    if (Objects.isNull(userVO)) {        User user = userMapper.selectById(userId);        if (Objects.nonNull(user)) {            userVO = new UserVO();            BeanUtils.copyProperties(user, userVO);            //如果不存在就放入缓存中            boolean res = userCache.putIfAbsent(user.getId(), userVO);            log.info(&quot;userCreateCache putIfAbsent {} res {}&quot;, userId, res);        }    }    return userVO;}</code></pre><h5 id="删除缓存"><a href="#删除缓存" class="headerlink" title="删除缓存"></a>删除缓存</h5><pre><code class="java">@Transactional(rollbackFor = Exception.class)public int deleteUserByIdAndCreateCache(Long userId) {    User user = new User();    UpdateWrapper&lt;User&gt; updateWrapper = new UpdateWrapper&lt;&gt;();    updateWrapper.lambda().eq(User::getId, userId).eq(User::getEnable, 1);    user.setId(userId);    user.setEnable(0);    int result = userMapper.update(user, updateWrapper);    if (result &gt; 0) {        //根据key = userId删除缓存        boolean deleteResult = userCache.remove(userId);        log.info(&quot;同步删除缓存, userId = {}, res = {}&quot;, userId, deleteResult);    }    return result;}</code></pre>]]></content>
    
    
    <categories>
      
      <category>缓存</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jetcache</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用github和hexo快速搭建个人博客</title>
    <link href="/2020/04/17/%E5%88%A9%E7%94%A8github%E5%92%8Chexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2020/04/17/%E5%88%A9%E7%94%A8github%E5%92%8Chexo%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h3><h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><p><code>git</code>下载地址：<code>http://gitforwindows.org</code></p><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><p> <code>node.js</code> 下载地址：<code>http://nodejs.org/en/</code> </p><h3 id="二、本地搭建"><a href="#二、本地搭建" class="headerlink" title="二、本地搭建"></a>二、本地搭建</h3><ul><li><p>选择一个文件夹建一个目录<code>blog</code>存放博客相关文件，文件夹内右键打开<code>git bash here</code>，在窗口中执行以下所有命令</p></li><li><p>用<code>npm</code>安装<code>hexo</code>，由于国内网络高“墙”深院，避免安装缓慢或失败，这里切换阿里的<code>NPM</code>镜像，没办法只能采用迂回战术了。</p></li></ul><pre><code class="sh">$ npm install -g cnpm --registry=http://registry.npm.taobao.org</code></pre><p>用 <code>cnpm</code> 安装 <code>hexo</code></p><pre><code class="sh">$ cnpm install -g hexo-cli$ cnpm install hexo --save##检查hexo是否安装成功$ hexo -v</code></pre><ul><li>在<code>blog</code>文件夹建一个<code>hexo</code>文件存放博客，进入也打开<code>git bash here</code></li></ul><pre><code class="sh">$ hexo init</code></pre><p>初始化成功后，<code>hexo文件</code>夹内会出现如下的文件：</p><p><code>node_modules</code>: 依赖包<br><code>public</code>：存放生成的页面<br><code>scaffolds</code>：生成文章的一些模板<br><code>source</code>：用来存放你的文章<br><code>themes</code>：放下下载的主题<br><code>_config.yml:</code> 博客的核心配置文件（设置主体、标题等属性）</p><ul><li><p>接着需要执行一下<code>cnpm install</code>命令，要不下边的启动会提示命令不合法。</p></li><li><p>最后使用<code>hexo s -g</code>启动安装好的<code>hexo</code></p></li></ul><h3 id="三、托管至GitHub"><a href="#三、托管至GitHub" class="headerlink" title="三、托管至GitHub"></a>三、托管至GitHub</h3><ul><li><p>建立一个仓库，名称为<code>xxx.github.io</code></p></li><li><p>配置<code>_config.xml</code>文件，添加<code>GitHub</code>地址</p></li></ul><pre><code class="yml">deploy:  type: git  repo: https://github.com/xxx/xxx.github.io.git  branch: master</code></pre><ul><li>安装部署命令<code>deploy-git</code> ，这样你才能用命令部署到<code>GitHub</code></li></ul><pre><code class="sh">$ cnpm install hexo-deployer-git  --save</code></pre><ul><li>安装好后，依次执行下列命令，提交本地<code>hexo</code>文件到<code>GitHub</code></li></ul><pre><code class="sh">$ hexo clean$ hexo generate$ hexo deploy</code></pre><ul><li>最后访问<code>https://xxx.github.io.git</code>即可</li></ul><h3 id="四、选择自己喜欢的主题"><a href="#四、选择自己喜欢的主题" class="headerlink" title="四、选择自己喜欢的主题"></a>四、选择自己喜欢的主题</h3><ul><li><p>到<code>http://hexo.io/themes/</code>下载主题，<code>git clone</code>到本地</p><p><code>git clone https://github.com/iissnan/hexo-theme-next</code></p></li><li><p>修改<code>hexo</code>文件夹下的<code>_config.yml</code>文件中的<code>theme</code>属性</p></li></ul><pre><code class="yml">theme: hexo-theme-next</code></pre><ul><li>再次打包上传即可<pre><code class="sh">$ hexo clean$ hexo generate$ hexo deploy</code></pre></li></ul><h3 id="五、Hexo基本操作"><a href="#五、Hexo基本操作" class="headerlink" title="五、Hexo基本操作"></a>五、Hexo基本操作</h3><p>博客文章都放在<code>source\_post</code>目录下</p>]]></content>
    
    
    <categories>
      
      <category>hexo</category>
      
      <category>建站</category>
      
    </categories>
    
    
    <tags>
      
      <tag>建站</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
